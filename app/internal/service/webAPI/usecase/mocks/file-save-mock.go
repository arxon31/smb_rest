// Code generated by MockGen. DO NOT EDIT.
// Source: file-save.go

// Package usecase is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileSaver is a mock of FileSaver interface.
type MockFileSaver struct {
	ctrl     *gomock.Controller
	recorder *MockFileSaverMockRecorder
}

// MockFileSaverMockRecorder is the mock recorder for MockFileSaver.
type MockFileSaverMockRecorder struct {
	mock *MockFileSaver
}

// NewMockFileSaver creates a new mock instance.
func NewMockFileSaver(ctrl *gomock.Controller) *MockFileSaver {
	mock := &MockFileSaver{ctrl: ctrl}
	mock.recorder = &MockFileSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSaver) EXPECT() *MockFileSaverMockRecorder {
	return m.recorder
}

// PutFile mocks base method.
func (m *MockFileSaver) PutFile(ctx context.Context, path string, content []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFile", ctx, path, content)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFile indicates an expected call of PutFile.
func (mr *MockFileSaverMockRecorder) PutFile(ctx, path, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFile", reflect.TypeOf((*MockFileSaver)(nil).PutFile), ctx, path, content)
}

// MockCacheUpdater is a mock of CacheUpdater interface.
type MockCacheUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockCacheUpdaterMockRecorder
}

// MockCacheUpdaterMockRecorder is the mock recorder for MockCacheUpdater.
type MockCacheUpdaterMockRecorder struct {
	mock *MockCacheUpdater
}

// NewMockCacheUpdater creates a new mock instance.
func NewMockCacheUpdater(ctrl *gomock.Controller) *MockCacheUpdater {
	mock := &MockCacheUpdater{ctrl: ctrl}
	mock.recorder = &MockCacheUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheUpdater) EXPECT() *MockCacheUpdaterMockRecorder {
	return m.recorder
}

// DeleteEmptyDir mocks base method.
func (m *MockCacheUpdater) DeleteEmptyDir(ctx context.Context, dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmptyDir", ctx, dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmptyDir indicates an expected call of DeleteEmptyDir.
func (mr *MockCacheUpdaterMockRecorder) DeleteEmptyDir(ctx, dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmptyDir", reflect.TypeOf((*MockCacheUpdater)(nil).DeleteEmptyDir), ctx, dir)
}
