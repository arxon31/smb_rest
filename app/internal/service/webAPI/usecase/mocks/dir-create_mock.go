// Code generated by MockGen. DO NOT EDIT.
// Source: ./dir-create.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDirectoryCreator is a mock of DirectoryCreator interface.
type MockDirectoryCreator struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryCreatorMockRecorder
}

// MockDirectoryCreatorMockRecorder is the mock recorder for MockDirectoryCreator.
type MockDirectoryCreatorMockRecorder struct {
	mock *MockDirectoryCreator
}

// NewMockDirectoryCreator creates a new mock instance.
func NewMockDirectoryCreator(ctrl *gomock.Controller) *MockDirectoryCreator {
	mock := &MockDirectoryCreator{ctrl: ctrl}
	mock.recorder = &MockDirectoryCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryCreator) EXPECT() *MockDirectoryCreatorMockRecorder {
	return m.recorder
}

// CreateDir mocks base method.
func (m *MockDirectoryCreator) CreateDir(ctx context.Context, dirPath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDir", ctx, dirPath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDir indicates an expected call of CreateDir.
func (mr *MockDirectoryCreatorMockRecorder) CreateDir(ctx, dirPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDir", reflect.TypeOf((*MockDirectoryCreator)(nil).CreateDir), ctx, dirPath)
}

// MockEmptyDirsCache is a mock of EmptyDirsCache interface.
type MockEmptyDirsCache struct {
	ctrl     *gomock.Controller
	recorder *MockEmptyDirsCacheMockRecorder
}

// MockEmptyDirsCacheMockRecorder is the mock recorder for MockEmptyDirsCache.
type MockEmptyDirsCacheMockRecorder struct {
	mock *MockEmptyDirsCache
}

// NewMockEmptyDirsCache creates a new mock instance.
func NewMockEmptyDirsCache(ctrl *gomock.Controller) *MockEmptyDirsCache {
	mock := &MockEmptyDirsCache{ctrl: ctrl}
	mock.recorder = &MockEmptyDirsCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmptyDirsCache) EXPECT() *MockEmptyDirsCacheMockRecorder {
	return m.recorder
}

// SaveDirs mocks base method.
func (m *MockEmptyDirsCache) SaveDirs(ctx context.Context, dirs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDirs", ctx, dirs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDirs indicates an expected call of SaveDirs.
func (mr *MockEmptyDirsCacheMockRecorder) SaveDirs(ctx, dirs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDirs", reflect.TypeOf((*MockEmptyDirsCache)(nil).SaveDirs), ctx, dirs)
}
